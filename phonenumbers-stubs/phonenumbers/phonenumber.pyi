from typing import Optional, overload

from .util import ImmutableMixin
from .util import UnicodeMixin

class CountryCodeSource:
    UNSPECIFIED: int = ...
    FROM_NUMBER_WITH_PLUS_SIGN: int = ...
    FROM_NUMBER_WITH_IDD: int = ...
    FROM_NUMBER_WITHOUT_PLUS_SIGN: int = ...
    FROM_DEFAULT_COUNTRY: int = ...

class PhoneNumber(UnicodeMixin):
    country_code: Optional[int] = ...
    national_number: Optional[int] = ...
    extension: Optional[str] = ...
    italian_leading_zero: Optional[bool] = ...
    number_of_leading_zeros: Optional[int] = ...
    raw_input: Optional[str] = ...
    country_code_source: int = ...
    preferred_domestic_carrier_code: Optional[str] = ...
    def __init__(
        self,
        country_code: Optional[int] = ...,
        national_number: Optional[int] = ...,
        extension: Optional[str] = ...,
        italian_leading_zero: Optional[bool] = ...,
        number_of_leading_zeros: Optional[int] = ...,
        raw_input: Optional[str] = ...,
        country_code_source: int = ...,
        preferred_domestic_carrier_code: Optional[str] = ...,
    ) -> None: ...
    def clear(self) -> None: ...
    def merge_from(self, other: object) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __unicode__(self) -> str: ...

class FrozenPhoneNumber(PhoneNumber, ImmutableMixin):
    country_code: Optional[int] = ...
    national_number: Optional[int] = ...
    extension: Optional[str] = ...
    italian_leading_zero: Optional[bool] = ...
    number_of_leading_zeros: Optional[int] = ...
    raw_input: Optional[str] = ...
    country_code_source: int = ...
    preferred_domestic_carrier_code: Optional[str] = ...
    @overload
    def __init__(self, numobj: PhoneNumber) -> None: ...
    @overload
    def __init__(
        self,
        country_code: Optional[int] = ...,
        national_number: Optional[int] = ...,
        extension: Optional[str] = ...,
        italian_leading_zero: Optional[bool] = ...,
        number_of_leading_zeros: Optional[int] = ...,
        raw_input: Optional[str] = ...,
        country_code_source: int = ...,
        preferred_domestic_carrier_code: Optional[str] = ...,
    ) -> None: ...
    def __hash__(self) -> int: ...
